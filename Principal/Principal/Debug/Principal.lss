
Principal.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000005ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000053a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000020  00800100  00800100  000005ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000090e  00000000  00000000  00000698  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a3  00000000  00000000  00000fa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000054a  00000000  00000000  00001649  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00001b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000455  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000385  00000000  00000000  000021e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000256a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_1>
   8:	0c 94 bf 01 	jmp	0x37e	; 0x37e <__vector_2>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <__vector_4>
  14:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 31 02 	jmp	0x462	; 0x462 <__vector_9>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__vector_13>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 23 01 	jmp	0x246	; 0x246 <__vector_16>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 32       	cpi	r26, 0x20	; 32
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6b 00 	call	0xd6	; 0xd6 <main>
  88:	0c 94 9b 02 	jmp	0x536	; 0x536 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <motoragitador>:
	TCCR1B|=(1<<WGM12);               //MODO CTC con comparador OCR1   (WGM13=0, WGM12=1, WGM11=0, WGM10=0)
	TCCR1B|=(1<<CS12);                //lkI/O/256 (from prescaler)   (CS12=1, CS11=0, CS10=0)
}

void servomotor(void)  // CONFIGURACION SERVOMOTOR (EN EL MAIN)
{
  90:	e0 eb       	ldi	r30, 0xB0	; 176
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	83 68       	ori	r24, 0x83	; 131
  98:	80 83       	st	Z, r24
  9a:	e1 eb       	ldi	r30, 0xB1	; 177
  9c:	f0 e0       	ldi	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	82 60       	ori	r24, 0x02	; 2
  a2:	80 83       	st	Z, r24
  a4:	08 95       	ret

000000a6 <temporizador>:
  a6:	14 bc       	out	0x24, r1	; 36
  a8:	85 e0       	ldi	r24, 0x05	; 5
  aa:	85 bd       	out	0x25, r24	; 37
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
  b2:	15 ba       	out	0x15, r1	; 21
  b4:	84 e6       	ldi	r24, 0x64	; 100
  b6:	86 bd       	out	0x26, r24	; 38
  b8:	08 95       	ret

000000ba <Buzzerstop>:
  ba:	e0 e8       	ldi	r30, 0x80	; 128
  bc:	f0 e0       	ldi	r31, 0x00	; 0
  be:	80 81       	ld	r24, Z
  c0:	80 61       	ori	r24, 0x10	; 16
  c2:	80 83       	st	Z, r24
  c4:	e1 e8       	ldi	r30, 0x81	; 129
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	80 81       	ld	r24, Z
  ca:	88 60       	ori	r24, 0x08	; 8
  cc:	80 83       	st	Z, r24
  ce:	80 81       	ld	r24, Z
  d0:	84 60       	ori	r24, 0x04	; 4
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <main>:

int main(void)
{
	//Entradas (0) y Salidas (1)
	
	DDRB= 0b11111111;      //A = PC0, B = PC1 , SERVO = OC1A(PB1), BUZZER =(PC4) , MOTOR = OC2A(PB3),
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	84 b9       	out	0x04, r24	; 4
	DDRC= 0b11111111;      //btstop= PD2, btsensor1= PD3, btsenosr2= PD4, btpower=PD5
  da:	87 b9       	out	0x07, r24	; 7
	
	//Interrupciones de los puertos PCINT2  21
	
	DDRD &= ~(1<<5);      //Establecer como entrada
  dc:	8a b1       	in	r24, 0x0a	; 10
  de:	8f 7d       	andi	r24, 0xDF	; 223
  e0:	8a b9       	out	0x0a, r24	; 10
	PCICR = 0b000000110;   //grupo 1 Y GRUPO 2 (8- 14) (16- 23)
  e2:	96 e0       	ldi	r25, 0x06	; 6
  e4:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f8068>
	PCMSK2 =0b00100000;  // Habilitar  21
  e8:	80 e2       	ldi	r24, 0x20	; 32
  ea:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f806d>
	
	//Interrupciones de los puertos PCINT1  DEL PUERTO PCIN 10
	
	DDRC &= ~(1<<2);      //Establecer como entrada
  ee:	87 b1       	in	r24, 0x07	; 7
  f0:	8b 7f       	andi	r24, 0xFB	; 251
  f2:	87 b9       	out	0x07, r24	; 7
	PCMSK1 =0b00000100;  // Habilitar  puerto 10
  f4:	24 e0       	ldi	r18, 0x04	; 4
  f6:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__TEXT_REGION_LENGTH__+0x7f806c>
	
	//Interrupciones INT1 e INT0
	
	EIMSK = 0b00000011;  //HABILITAR INT1 E INT0
  fa:	83 e0       	ldi	r24, 0x03	; 3
  fc:	8d bb       	out	0x1d, r24	; 29
	EICRA = 0b00000001;   // ACTIVACION POR FLANCO SUBIDA
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIFR = 0; // Banderas de INT0 limpias
 104:	1c ba       	out	0x1c, r1	; 28
	
	// CONFIGURACION TIMMER 2
	TCCR2B = 0b00000100; //PRESCALER (64)
 106:	20 93 b1 00 	sts	0x00B1, r18	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
	TIMSK2 = 0b00000001; // REGISTRO DESBORDAMIENTO
 10a:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7f8070>
	TCNT2 = 6;  // 256 - (F_cpu* Tpout)/PRESCALER    (256 - (16Mhz*1ms)/64)
 10e:	90 93 b2 00 	sts	0x00B2, r25	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7f80b2>
	//
	
	// CONFIGURACION SERVOMOTOR
	TCNT1 = 0; // REINICIAR 
 112:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 116:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
	ICR1 = 20000; // PERIODO DE SEÑAL 20 ms
 11a:	80 e2       	ldi	r24, 0x20	; 32
 11c:	9e e4       	ldi	r25, 0x4E	; 78
 11e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 122:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	TCCR1A =  (1 << COM1A1) | (0 << COM1A0) ; // COMPARACION EN BAJO
 126:	e0 e8       	ldi	r30, 0x80	; 128
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 e8       	ldi	r24, 0x80	; 128
 12c:	80 83       	st	Z, r24
	TCCR1A |=  (1 << WGM11) | (0 << WGM10) ; // Fast PWM: TOP: ICR1
 12e:	80 81       	ld	r24, Z
 130:	82 60       	ori	r24, 0x02	; 2
 132:	80 83       	st	Z, r24
	TCCR1B = (1 << WGM13) | (1 << WGM12); // // Fast PWM: TOP: ICR1
 134:	e1 e8       	ldi	r30, 0x81	; 129
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	88 e1       	ldi	r24, 0x18	; 24
 13a:	80 83       	st	Z, r24
	TCCR1B |= (0 << CS12) | (1 << CS11) | ( 0 << CS10 ); // PRESCALER 8
 13c:	80 81       	ld	r24, Z
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	80 83       	st	Z, r24
		
	sei(); // HABILITAR INTERRUPCIONES GLOBALES .-.
 142:	78 94       	sei
	
	while (1)
	{ 		
	    // CONDICIONAL INICIO DE PROCESO	
		
		if(btpower==1)  
 144:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <btpower>
 148:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <btpower+0x1>
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	d1 f7       	brne	.-12     	; 0x144 <main+0x6e>
		{ 
			// CONDICION CUMPLIMIENTO DE INGEDIENTE A
			if(A==5)   
 150:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <A>
 154:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <A+0x1>
 158:	05 97       	sbiw	r24, 0x05	; 5
 15a:	49 f4       	brne	.+18     	; 0x16e <main+0x98>
			{
				PORTC &= ~(1<<0); // APAGAR LED A
 15c:	88 b1       	in	r24, 0x08	; 8
 15e:	8e 7f       	andi	r24, 0xFE	; 254
 160:	88 b9       	out	0x08, r24	; 8
				IngredienteA=1;
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <IngredienteA+0x1>
 16a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <IngredienteA>
			}
			
			// CONDICION CUMPLIMIENTO DE INGEDIENTE B
			if(B==29)  
 16e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <B>
 172:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <B+0x1>
 176:	4d 97       	sbiw	r24, 0x1d	; 29
 178:	49 f4       	brne	.+18     	; 0x18c <main+0xb6>
			{
				PORTC &= ~(1<<1); // APAGAR LED B
 17a:	88 b1       	in	r24, 0x08	; 8
 17c:	8d 7f       	andi	r24, 0xFD	; 253
 17e:	88 b9       	out	0x08, r24	; 8
				IngredienteB=1;
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <IngredienteB+0x1>
 188:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <IngredienteB>
			}
			
			// CONDICIONAL INGREDIENTES COMPLETOS EN LA MEZCLA
			if(IngredienteA==1&&IngredienteB==1)
 18c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <IngredienteA>
 190:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <IngredienteA+0x1>
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	61 f4       	brne	.+24     	; 0x1b0 <main+0xda>
 198:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <IngredienteB>
 19c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <IngredienteB+0x1>
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	31 f4       	brne	.+12     	; 0x1b0 <main+0xda>
			{
				//MODIFICAR MOTOR AGITADOR AL 80%
				motoragitador();
 1a4:	0e 94 48 00 	call	0x90	; 0x90 <motoragitador>
				OCR2A = 204;     
 1a8:	8c ec       	ldi	r24, 0xCC	; 204
 1aa:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
 1ae:	05 c0       	rjmp	.+10     	; 0x1ba <main+0xe4>
			}
			else
			{
				// MODIFICAR MOTOR AL 30%
				motoragitador();
 1b0:	0e 94 48 00 	call	0x90	; 0x90 <motoragitador>
				OCR2A = 77;     
 1b4:	8d e4       	ldi	r24, 0x4D	; 77
 1b6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			}
			
			// CONDICION AL PRESIONAR BOTON STOP
			
			if (btstop==1)   
 1ba:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <btstop>
 1be:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <btstop+0x1>
 1c2:	01 97       	sbiw	r24, 0x01	; 1
 1c4:	f1 f4       	brne	.+60     	; 0x202 <main+0x12c>
			{
				 buzzerStop=1;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <buzzerStop+0x1>
 1ce:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <buzzerStop>
				 btstop=1;
 1d2:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <btstop+0x1>
 1d6:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <btstop>
				 OCR2A = 0;
 1da:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
				 PORTC &= ~(1<<0);
 1de:	88 b1       	in	r24, 0x08	; 8
 1e0:	8e 7f       	andi	r24, 0xFE	; 254
 1e2:	88 b9       	out	0x08, r24	; 8
				 PORTC &= ~(1<<1);
 1e4:	88 b1       	in	r24, 0x08	; 8
 1e6:	8d 7f       	andi	r24, 0xFD	; 253
 1e8:	88 b9       	out	0x08, r24	; 8
				 PORTB &= ~(1<<3);
 1ea:	85 b1       	in	r24, 0x05	; 5
 1ec:	87 7f       	andi	r24, 0xF7	; 247
 1ee:	85 b9       	out	0x05, r24	; 5
				 PORTB &= ~(1<<2);                  
 1f0:	85 b1       	in	r24, 0x05	; 5
 1f2:	8b 7f       	andi	r24, 0xFB	; 251
 1f4:	85 b9       	out	0x05, r24	; 5
				 PORTB &= ~(1<<4);
 1f6:	85 b1       	in	r24, 0x05	; 5
 1f8:	8f 7e       	andi	r24, 0xEF	; 239
 1fa:	85 b9       	out	0x05, r24	; 5
				 PORTB &= ~(1<<5);
 1fc:	85 b1       	in	r24, 0x05	; 5
 1fe:	8f 7d       	andi	r24, 0xDF	; 223
 200:	85 b9       	out	0x05, r24	; 5
			}
			
			// CONDICION AL ESPERAR 1 MINUTO
			
			if (ledtempmin==1) 
 202:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ledtempmin>
 206:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ledtempmin+0x1>
 20a:	01 97       	sbiw	r24, 0x01	; 1
 20c:	21 f4       	brne	.+8      	; 0x216 <main+0x140>
			{
				//APAGAR MOTOR AL 0% DUTTY CICLE
				motoragitador();
 20e:	0e 94 48 00 	call	0x90	; 0x90 <motoragitador>
				OCR2A = 0;	
 212:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			}
			
			// CONDICONAL PARA MODOFICAR SERVOMOTOR AL 135°
			if (inicioservo)
 216:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <inicioservo>
 21a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <inicioservo+0x1>
 21e:	89 2b       	or	r24, r25
 220:	09 f4       	brne	.+2      	; 0x224 <main+0x14e>
 222:	90 cf       	rjmp	.-224    	; 0x144 <main+0x6e>
			{
				//ENCENDER SERVOMOTOR A 135°
				servomotor();
				OCR1A= 1749;  // SERVO A 135°;
 224:	25 ed       	ldi	r18, 0xD5	; 213
 226:	36 e0       	ldi	r19, 0x06	; 6
 228:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 22c:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
				DDRB &= ~(1<<1);  // CONFIGURAR PB1 COMO SALIDA
 230:	84 b1       	in	r24, 0x04	; 4
 232:	8d 7f       	andi	r24, 0xFD	; 253
 234:	84 b9       	out	0x04, r24	; 4
				DDRB |= (1<<1);  
 236:	84 b1       	in	r24, 0x04	; 4
 238:	82 60       	ori	r24, 0x02	; 2
 23a:	84 b9       	out	0x04, r24	; 4
				Posicion_servo=1749;  // GUARDAR POSICION DEL SERVO
 23c:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 240:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
 244:	7f cf       	rjmp	.-258    	; 0x144 <main+0x6e>

00000246 <__vector_16>:
				
}// main
	

ISR(TIMER0_OVF_vect)  //TEMPORIZADOR 1 MINUTO Y 45 SEGUNDOS
{
 246:	1f 92       	push	r1
 248:	0f 92       	push	r0
 24a:	0f b6       	in	r0, 0x3f	; 63
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
	cnt++;
 268:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 26c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cnt+0x1>
 270:	01 96       	adiw	r24, 0x01	; 1
 272:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <cnt+0x1>
 276:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <cnt>
	
	if(cnt>=2799)  // 2799 :56 segundos  
 27a:	8f 3e       	cpi	r24, 0xEF	; 239
 27c:	9a 40       	sbci	r25, 0x0A	; 10
 27e:	6c f1       	brlt	.+90     	; 0x2da <__vector_16+0x94>
	{
		inicioservo=1;
 280:	81 e0       	ldi	r24, 0x01	; 1
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <inicioservo+0x1>
 288:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <inicioservo>
		ledtempmin=1;
 28c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ledtempmin+0x1>
 290:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ledtempmin>
		
		 DDRC|=(1<<4);  //BUZZER
 294:	87 b1       	in	r24, 0x07	; 7
 296:	80 61       	ori	r24, 0x10	; 16
 298:	87 b9       	out	0x07, r24	; 7
		 PORTC = (1<<4); // Puerto "PC4" esta en alto   (prender el pc4)
 29a:	80 e1       	ldi	r24, 0x10	; 16
 29c:	88 b9       	out	0x08, r24	; 8
		 
		 // CONDICION PARA BUZZER (2 BEEPS)
		 
		 if(cnt>=2805 && cnt<=2810)  
 29e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 2a2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cnt+0x1>
 2a6:	9c 01       	movw	r18, r24
 2a8:	25 5f       	subi	r18, 0xF5	; 245
 2aa:	3a 40       	sbci	r19, 0x0A	; 10
 2ac:	26 30       	cpi	r18, 0x06	; 6
 2ae:	31 05       	cpc	r19, r1
 2b0:	20 f4       	brcc	.+8      	; 0x2ba <__vector_16+0x74>
		 {
			 PORTC &= ~(1<<4); // Puerto "PC4" en bajo	 
 2b2:	88 b1       	in	r24, 0x08	; 8
 2b4:	8f 7e       	andi	r24, 0xEF	; 239
 2b6:	88 b9       	out	0x08, r24	; 8
 2b8:	10 c0       	rjmp	.+32     	; 0x2da <__vector_16+0x94>
	     }
			 else if (cnt>=2810 && cnt<=2815)
 2ba:	9c 01       	movw	r18, r24
 2bc:	2a 5f       	subi	r18, 0xFA	; 250
 2be:	3a 40       	sbci	r19, 0x0A	; 10
 2c0:	26 30       	cpi	r18, 0x06	; 6
 2c2:	31 05       	cpc	r19, r1
 2c4:	18 f4       	brcc	.+6      	; 0x2cc <__vector_16+0x86>
		 {
			PORTC = (1<<4); // Puerto "PC4" esta en alto 
 2c6:	80 e1       	ldi	r24, 0x10	; 16
 2c8:	88 b9       	out	0x08, r24	; 8
 2ca:	07 c0       	rjmp	.+14     	; 0x2da <__vector_16+0x94>
	  
		}   else if (cnt>=2815&&cnt<=2820)
 2cc:	8f 5f       	subi	r24, 0xFF	; 255
 2ce:	9a 40       	sbci	r25, 0x0A	; 10
 2d0:	06 97       	sbiw	r24, 0x06	; 6
 2d2:	18 f4       	brcc	.+6      	; 0x2da <__vector_16+0x94>
		
		 {
			 PORTC &= ~(1<<4); // Puerto "PC4" en bajo
 2d4:	88 b1       	in	r24, 0x08	; 8
 2d6:	8f 7e       	andi	r24, 0xEF	; 239
 2d8:	88 b9       	out	0x08, r24	; 8
		 }
		 
        }
		   // PROCESO FINAL ESPERAR 45 SEGUNDOS Y CONDICIONES INICIALES (1 min +45 seg) cnt=2799 =56 seg, cnt= 2199 =45 segundos
		 
		 if(cnt>=4998)  
 2da:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <cnt>
 2de:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <cnt+0x1>
 2e2:	86 38       	cpi	r24, 0x86	; 134
 2e4:	93 41       	sbci	r25, 0x13	; 19
 2e6:	e4 f0       	brlt	.+56     	; 0x320 <__vector_16+0xda>
		 {
			 IngredienteA=0;
 2e8:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <IngredienteA+0x1>
 2ec:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <IngredienteA>
			 IngredienteB=0;	// Variables iniciales (0)
 2f0:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <IngredienteB+0x1>
 2f4:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <IngredienteB>
			 A = 0;
 2f8:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <A+0x1>
 2fc:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <A>
			 B = 0;
 300:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <B+0x1>
 304:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <B>
			 cnt=0;
 308:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <cnt+0x1>
 30c:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <cnt>
			 motoragitador();
 310:	0e 94 48 00 	call	0x90	; 0x90 <motoragitador>
			 OCR2A = 0;
 314:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
			 servomotor();
			 OCR1A=0;              //servomotor en 0°
 318:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 31c:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
		 }
		 
	TCNT0 = 100;
 320:	84 e6       	ldi	r24, 0x64	; 100
 322:	86 bd       	out	0x26, r24	; 38
}
 324:	ff 91       	pop	r31
 326:	ef 91       	pop	r30
 328:	bf 91       	pop	r27
 32a:	af 91       	pop	r26
 32c:	9f 91       	pop	r25
 32e:	8f 91       	pop	r24
 330:	7f 91       	pop	r23
 332:	6f 91       	pop	r22
 334:	5f 91       	pop	r21
 336:	4f 91       	pop	r20
 338:	3f 91       	pop	r19
 33a:	2f 91       	pop	r18
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <__vector_1>:


ISR(INT0_vect) // ACCION DE PRESIONAR BOTON STOP
{
 346:	1f 92       	push	r1
 348:	0f 92       	push	r0
 34a:	0f b6       	in	r0, 0x3f	; 63
 34c:	0f 92       	push	r0
 34e:	11 24       	eor	r1, r1
 350:	8f 93       	push	r24
 352:	9f 93       	push	r25
	 btstop=1;
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	90 e0       	ldi	r25, 0x00	; 0
 358:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <btstop+0x1>
 35c:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <btstop>
	 btpower=0;
 360:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <btpower+0x1>
 364:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <btpower>
	 buzzerStop=1;
 368:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <buzzerStop+0x1>
 36c:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <buzzerStop>
}
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <__vector_2>:

ISR(INT1_vect)// ACCIONAR SENSOR 1 DE INGREDIENTE A 
{                            
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
 388:	8f 93       	push	r24
 38a:	9f 93       	push	r25
	if(btpower==1)
 38c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <btpower>
 390:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <btpower+0x1>
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	49 f4       	brne	.+18     	; 0x3aa <__vector_2+0x2c>
	{
		A++;
 398:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <A>
 39c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <A+0x1>
 3a0:	01 96       	adiw	r24, 0x01	; 1
 3a2:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <A+0x1>
 3a6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <A>
	}
}
 3aa:	9f 91       	pop	r25
 3ac:	8f 91       	pop	r24
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <__vector_4>:

ISR(PCINT1_vect)// ACCIONAR SENSOR 2 DE INGREDIENTE B
{
 3b8:	1f 92       	push	r1
 3ba:	0f 92       	push	r0
 3bc:	0f b6       	in	r0, 0x3f	; 63
 3be:	0f 92       	push	r0
 3c0:	11 24       	eor	r1, r1
 3c2:	8f 93       	push	r24
 3c4:	9f 93       	push	r25
   if(btpower==1)
 3c6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <btpower>
 3ca:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <btpower+0x1>
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	49 f4       	brne	.+18     	; 0x3e4 <__vector_4+0x2c>
   {
	    B++;  
 3d2:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <B>
 3d6:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <B+0x1>
 3da:	01 96       	adiw	r24, 0x01	; 1
 3dc:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <B+0x1>
 3e0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <B>
   }
}
 3e4:	9f 91       	pop	r25
 3e6:	8f 91       	pop	r24
 3e8:	0f 90       	pop	r0
 3ea:	0f be       	out	0x3f, r0	; 63
 3ec:	0f 90       	pop	r0
 3ee:	1f 90       	pop	r1
 3f0:	18 95       	reti

000003f2 <__vector_5>:
	

ISR(PCINT2_vect)  // PRESIONAR BOTON POWER (INICIO)
{   
 3f2:	1f 92       	push	r1
 3f4:	0f 92       	push	r0
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	0f 92       	push	r0
 3fa:	11 24       	eor	r1, r1
 3fc:	2f 93       	push	r18
 3fe:	3f 93       	push	r19
 400:	4f 93       	push	r20
 402:	5f 93       	push	r21
 404:	6f 93       	push	r22
 406:	7f 93       	push	r23
 408:	8f 93       	push	r24
 40a:	9f 93       	push	r25
 40c:	af 93       	push	r26
 40e:	bf 93       	push	r27
 410:	ef 93       	push	r30
 412:	ff 93       	push	r31
	temporizador();
 414:	0e 94 53 00 	call	0xa6	; 0xa6 <temporizador>
	motoragitador();
 418:	0e 94 48 00 	call	0x90	; 0x90 <motoragitador>
	PORTC |= (1<<5);
 41c:	88 b1       	in	r24, 0x08	; 8
 41e:	80 62       	ori	r24, 0x20	; 32
 420:	88 b9       	out	0x08, r24	; 8
	OCR2A=77;
 422:	8d e4       	ldi	r24, 0x4D	; 77
 424:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7f80b3>
	btpower=1;
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <btpower+0x1>
 430:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <btpower>
	btstop=0;
 434:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <btstop+0x1>
 438:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <btstop>
	
	if(btpower==1)
	{
	PORTC = 0b00000011; // ENCENDER LED A y B
 43c:	83 e0       	ldi	r24, 0x03	; 3
 43e:	88 b9       	out	0x08, r24	; 8
	else
	{
	PORTC = 0b00000000; // APAGAR LED A y B
	}
		
}
 440:	ff 91       	pop	r31
 442:	ef 91       	pop	r30
 444:	bf 91       	pop	r27
 446:	af 91       	pop	r26
 448:	9f 91       	pop	r25
 44a:	8f 91       	pop	r24
 44c:	7f 91       	pop	r23
 44e:	6f 91       	pop	r22
 450:	5f 91       	pop	r21
 452:	4f 91       	pop	r20
 454:	3f 91       	pop	r19
 456:	2f 91       	pop	r18
 458:	0f 90       	pop	r0
 45a:	0f be       	out	0x3f, r0	; 63
 45c:	0f 90       	pop	r0
 45e:	1f 90       	pop	r1
 460:	18 95       	reti

00000462 <__vector_9>:
ISR(TIMER2_OVF_vect)  // TIMER BUZZER DEL BOTON STOP Y PARAR
{
 462:	1f 92       	push	r1
 464:	0f 92       	push	r0
 466:	0f b6       	in	r0, 0x3f	; 63
 468:	0f 92       	push	r0
 46a:	11 24       	eor	r1, r1
 46c:	8f 93       	push	r24
 46e:	9f 93       	push	r25
	Contbuzzer++;
 470:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Contbuzzer>
 474:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <Contbuzzer+0x1>
 478:	01 96       	adiw	r24, 0x01	; 1
 47a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <Contbuzzer+0x1>
 47e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <Contbuzzer>
	
	if(Contbuzzer == 250) // 250 ms (500ms/2) = 50%
 482:	8a 3f       	cpi	r24, 0xFA	; 250
 484:	91 05       	cpc	r25, r1
 486:	19 f5       	brne	.+70     	; 0x4ce <__vector_9+0x6c>
	{ 
		Contbuzzer = 0;
 488:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <Contbuzzer+0x1>
 48c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <Contbuzzer>
		
		//CONDICONAL SI ESTÁ APAGADO Y BOTON STOP PRESIONADO
		
		if ((btpower == 0)||(buzzerStop == 1))
 490:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <btpower>
 494:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <btpower+0x1>
 498:	89 2b       	or	r24, r25
 49a:	31 f0       	breq	.+12     	; 0x4a8 <__vector_9+0x46>
 49c:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <buzzerStop>
 4a0:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <buzzerStop+0x1>
 4a4:	01 97       	sbiw	r24, 0x01	; 1
 4a6:	79 f4       	brne	.+30     	; 0x4c6 <__vector_9+0x64>
		{
			if (btstop == 1)
 4a8:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <btstop>
 4ac:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <btstop+0x1>
 4b0:	01 97       	sbiw	r24, 0x01	; 1
 4b2:	29 f4       	brne	.+10     	; 0x4be <__vector_9+0x5c>
			{
				
				PORTC ^= (1<<4); 
 4b4:	98 b1       	in	r25, 0x08	; 8
 4b6:	80 e1       	ldi	r24, 0x10	; 16
 4b8:	89 27       	eor	r24, r25
 4ba:	88 b9       	out	0x08, r24	; 8
 4bc:	08 c0       	rjmp	.+16     	; 0x4ce <__vector_9+0x6c>
			}
        else{
				PORTC &= ~(1<<4);
 4be:	88 b1       	in	r24, 0x08	; 8
 4c0:	8f 7e       	andi	r24, 0xEF	; 239
 4c2:	88 b9       	out	0x08, r24	; 8
 4c4:	04 c0       	rjmp	.+8      	; 0x4ce <__vector_9+0x6c>
				
			}
			
			}else{
			PORTC ^= (1<<4);
 4c6:	98 b1       	in	r25, 0x08	; 8
 4c8:	80 e1       	ldi	r24, 0x10	; 16
 4ca:	89 27       	eor	r24, r25
 4cc:	88 b9       	out	0x08, r24	; 8
		}
	}
	
}
 4ce:	9f 91       	pop	r25
 4d0:	8f 91       	pop	r24
 4d2:	0f 90       	pop	r0
 4d4:	0f be       	out	0x3f, r0	; 63
 4d6:	0f 90       	pop	r0
 4d8:	1f 90       	pop	r1
 4da:	18 95       	reti

000004dc <__vector_13>:

ISR(TIMER1_OVF_vect) //SERVO MOTOR Y BUZZER
{
 4dc:	1f 92       	push	r1
 4de:	0f 92       	push	r0
 4e0:	0f b6       	in	r0, 0x3f	; 63
 4e2:	0f 92       	push	r0
 4e4:	11 24       	eor	r1, r1
 4e6:	2f 93       	push	r18
 4e8:	3f 93       	push	r19
 4ea:	4f 93       	push	r20
 4ec:	5f 93       	push	r21
 4ee:	6f 93       	push	r22
 4f0:	7f 93       	push	r23
 4f2:	8f 93       	push	r24
 4f4:	9f 93       	push	r25
 4f6:	af 93       	push	r26
 4f8:	bf 93       	push	r27
 4fa:	ef 93       	push	r30
 4fc:	ff 93       	push	r31
	
 Buzzerstop();
 4fe:	0e 94 5d 00 	call	0xba	; 0xba <Buzzerstop>
 OCR1A=7813;
 502:	85 e8       	ldi	r24, 0x85	; 133
 504:	9e e1       	ldi	r25, 0x1E	; 30
 506:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 50a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 DDRB|= (1<<PORTB2);  //DEFINIR PUERTO PB2 COMO SALIDA
 50e:	84 b1       	in	r24, 0x04	; 4
 510:	84 60       	ori	r24, 0x04	; 4
 512:	84 b9       	out	0x04, r24	; 4
}
 514:	ff 91       	pop	r31
 516:	ef 91       	pop	r30
 518:	bf 91       	pop	r27
 51a:	af 91       	pop	r26
 51c:	9f 91       	pop	r25
 51e:	8f 91       	pop	r24
 520:	7f 91       	pop	r23
 522:	6f 91       	pop	r22
 524:	5f 91       	pop	r21
 526:	4f 91       	pop	r20
 528:	3f 91       	pop	r19
 52a:	2f 91       	pop	r18
 52c:	0f 90       	pop	r0
 52e:	0f be       	out	0x3f, r0	; 63
 530:	0f 90       	pop	r0
 532:	1f 90       	pop	r1
 534:	18 95       	reti

00000536 <_exit>:
 536:	f8 94       	cli

00000538 <__stop_program>:
 538:	ff cf       	rjmp	.-2      	; 0x538 <__stop_program>
